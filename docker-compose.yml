version: '3.9'

services:
  backend:
    container_name: "${APP_NAME}-backend"
    build:
      context: .
      dockerfile: deployment/Dockerfile
      args:
        APP_NAME: "${APP_NAME}"
        APP_HOST: "${APP_HOST}"
        APP_PORT: "${APP_PORT}"
    volumes:
      - ./src:/usr/src/app/
      - ./deployment/scripts:/app/deployment/scripts/
    env_file:
      - .env
    ports:
      - "${APP_PORT:-8000}:${APP_PORT:-8000}"
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    command: [ "/bin/sh", "/app/deployment/scripts/backend/start.sh" ]
    networks:
      - app-network

  db:
    image: postgres:15.2-alpine
    container_name: "${APP_NAME}-db"
    hostname: "${POSTGRES_HOST:-db}"
    volumes:
      - postgres_data_dir:/var/lib/postgresql/data/
    env_file:
      - .env
    expose:
      - "${POSTGRES_PORT:-5432}"
    shm_size: 1g
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  redis:
    image: redis:7.0.5-alpine
    container_name: "${APP_NAME}-redis"
    volumes:
      - redis_data:/data
    # Uncomment the following lines if Redis needs to be accessed externally
    # ports:
    #   - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - app-network

  celery-worker:
    <<: *base-celery
    container_name: "${APP_NAME}-celery-worker"
    command: [ "/bin/sh", "/app/deployment/scripts/celery/start-worker.sh" ]

  celery-beat:
    <<: *base-celery
    container_name: "${APP_NAME}-celery-beat"
    command: [ "/bin/sh", "/app/deployment/scripts/celery/start-beat.sh" ]

x-base-celery: &base-celery
  build:
    context: .
    dockerfile: deployment/Dockerfile
    args:
      APP_NAME: "${APP_NAME}"
      APP_HOST: "${APP_HOST}"
      APP_PORT: "${APP_PORT}"
  volumes:
    - ./src:/usr/src/app/
    - ./deployment/scripts:/app/deployment/scripts/
  env_file:
    - .env
  depends_on:
    db:
      condition: service_healthy
    redis:
      condition: service_healthy
    backend:
      condition: service_healthy
  restart: unless-stopped
  networks:
    - app-network

volumes:
  postgres_data_dir:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
